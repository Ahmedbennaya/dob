{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_REGISTER, AUTH_ERROR, CONTACT_INQUIRY } from '../types';\n\n// Set the base URL for the API\nconst API_URL = 'http://localhost:5000/api/auth';\n\n// Action to register a new user\nexport const registerUser = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/signup`, userData);\n    dispatch({\n      type: AUTH_REGISTER,\n      payload: response.data\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: AUTH_ERROR,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed'\n    });\n  }\n};\n\n// Action to log in a user\nexport const loginUser = credentials => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, credentials);\n    dispatch({\n      type: AUTH_LOGIN,\n      payload: response.data\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: AUTH_ERROR,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed'\n    });\n  }\n};\n\n// Action to log out a user\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: AUTH_LOGOUT\n  });\n};\n\n// Action to send contact form inquiry\nexport const sendContactInquiry = contactData => async dispatch => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/contact', contactData);\n    dispatch({\n      type: CONTACT_INQUIRY,\n      payload: response.data\n    });\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    dispatch({\n      type: AUTH_ERROR,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Inquiry submission failed'\n    });\n  }\n};","map":{"version":3,"names":["axios","AUTH_LOGIN","AUTH_LOGOUT","AUTH_REGISTER","AUTH_ERROR","CONTACT_INQUIRY","API_URL","registerUser","userData","dispatch","response","post","type","payload","data","error","_error$response","_error$response$data","message","loginUser","credentials","_error$response2","_error$response2$data","logoutUser","sendContactInquiry","contactData","_error$response3","_error$response3$data"],"sources":["C:/Users/maison/OneDrive/Bureau/Haithem site/doberman-breeding-business/frontend/src/redux/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_REGISTER, AUTH_ERROR, CONTACT_INQUIRY } from '../types';\n\n// Set the base URL for the API\nconst API_URL = 'http://localhost:5000/api/auth';\n\n// Action to register a new user\nexport const registerUser = (userData) => async (dispatch) => {\n    try {\n        const response = await axios.post(`${API_URL}/signup`, userData);\n        dispatch({ type: AUTH_REGISTER, payload: response.data });\n    } catch (error) {\n        dispatch({ type: AUTH_ERROR, payload: error.response?.data?.message || 'Registration failed' });\n    }\n};\n\n// Action to log in a user\nexport const loginUser = (credentials) => async (dispatch) => {\n    try {\n        const response = await axios.post(`${API_URL}/login`, credentials);\n        dispatch({ type: AUTH_LOGIN, payload: response.data });\n    } catch (error) {\n        dispatch({ type: AUTH_ERROR, payload: error.response?.data?.message || 'Login failed' });\n    }\n};\n\n// Action to log out a user\nexport const logoutUser = () => (dispatch) => {\n    dispatch({ type: AUTH_LOGOUT });\n};\n\n// Action to send contact form inquiry\nexport const sendContactInquiry = (contactData) => async (dispatch) => {\n    try {\n        const response = await axios.post('http://localhost:5000/api/contact', contactData);\n        dispatch({ type: CONTACT_INQUIRY, payload: response.data });\n    } catch (error) {\n        dispatch({ type: AUTH_ERROR, payload: error.response?.data?.message || 'Inquiry submission failed' });\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEC,UAAU,EAAEC,eAAe,QAAQ,UAAU;;AAE9F;AACA,MAAMC,OAAO,GAAG,gCAAgC;;AAEhD;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAEE,QAAQ,CAAC;IAChEC,QAAQ,CAAC;MAAEG,IAAI,EAAET,aAAa;MAAEU,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACZR,QAAQ,CAAC;MAAEG,IAAI,EAAER,UAAU;MAAES,OAAO,EAAE,EAAAG,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI;IAAsB,CAAC,CAAC;EACnG;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAIC,WAAW,IAAK,MAAOX,QAAQ,IAAK;EAC1D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAEc,WAAW,CAAC;IAClEX,QAAQ,CAAC;MAAEG,IAAI,EAAEX,UAAU;MAAEY,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAM,gBAAA,EAAAC,qBAAA;IACZb,QAAQ,CAAC;MAAEG,IAAI,EAAER,UAAU;MAAES,OAAO,EAAE,EAAAQ,gBAAA,GAAAN,KAAK,CAACL,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBP,IAAI,cAAAQ,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI;IAAe,CAAC,CAAC;EAC5F;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,UAAU,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EAC1CA,QAAQ,CAAC;IAAEG,IAAI,EAAEV;EAAY,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMsB,kBAAkB,GAAIC,WAAW,IAAK,MAAOhB,QAAQ,IAAK;EACnE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,mCAAmC,EAAEc,WAAW,CAAC;IACnFhB,QAAQ,CAAC;MAAEG,IAAI,EAAEP,eAAe;MAAEQ,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAW,gBAAA,EAAAC,qBAAA;IACZlB,QAAQ,CAAC;MAAEG,IAAI,EAAER,UAAU;MAAES,OAAO,EAAE,EAAAa,gBAAA,GAAAX,KAAK,CAACL,QAAQ,cAAAgB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBT,OAAO,KAAI;IAA4B,CAAC,CAAC;EACzG;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}